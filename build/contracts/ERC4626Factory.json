{
  "contractName": "ERC4626Factory",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract ERC20",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract ERC4626",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "CreateERC4626",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "contract ERC20",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "createERC4626",
      "outputs": [
        {
          "internalType": "contract ERC4626",
          "name": "vault",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ERC20",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "computeERC4626Address",
      "outputs": [
        {
          "internalType": "contract ERC4626",
          "name": "vault",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ERC20\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ERC4626\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"CreateERC4626\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"computeERC4626Address\",\"outputs\":[{\"internalType\":\"contract ERC4626\",\"name\":\"vault\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"createERC4626\",\"outputs\":[{\"internalType\":\"contract ERC4626\",\"name\":\"vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"zefram.eth\",\"details\":\"Uses CREATE2 deterministic deployment, so there can only be a single vault for each asset.\",\"events\":{\"CreateERC4626(address,address)\":{\"params\":{\"asset\":\"The base asset used by the vault\",\"vault\":\"The vault that was created\"}}},\"kind\":\"dev\",\"methods\":{\"computeERC4626Address(address)\":{\"params\":{\"asset\":\"The base asset used by the vault\"},\"returns\":{\"vault\":\"The vault corresponding to the asset\"}},\"createERC4626(address)\":{\"details\":\"Uses CREATE2 deterministic deployment, so there can only be a single vault for each asset. Will revert if a vault has already been deployed for the asset.\",\"params\":{\"asset\":\"The base asset used by the vault\"},\"returns\":{\"vault\":\"The vault that was created\"}}},\"title\":\"ERC4626Factory\",\"version\":1},\"userdoc\":{\"events\":{\"CreateERC4626(address,address)\":{\"notice\":\"Emitted when a new ERC4626 vault has been created\"}},\"kind\":\"user\",\"methods\":{\"computeERC4626Address(address)\":{\"notice\":\"Computes the address of the ERC4626 vault corresponding to an asset. Returns a valid result regardless of whether the vault has already been deployed.\"},\"createERC4626(address)\":{\"notice\":\"Creates an ERC4626 vault for an asset\"}},\"notice\":\"Abstract base contract for deploying ERC4626 wrappers\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/yield-daddy/base/ERC4626Factory.sol\":\"ERC4626Factory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"project:/contracts/solmate/mixins/ERC4626.sol\":{\"keccak256\":\"0xab0c4f376b87963c53a14c7e9356f798de2a7d59cfde9ebfdda3960c6dfa9ea4\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://a7a9186aec86029bd6709b2af61a3dded732b68ca0f9a7b5a57b2c61fa74ad8c\",\"dweb:/ipfs/QmTdctVzJGkCWxJ8fsWmTyJ2BZ8PXz43W5gVXB8CoZb3WH\"]},\"project:/contracts/solmate/tokens/ERC20.sol\":{\"keccak256\":\"0xd170a153117cb8a147e3de973cbc6aaea88635db79ea66ef4abc5f4c6396ce90\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://f3aca4bbb62857fedc28fee515c55dfbdfcda15a6be89ee9a6cd99b11416acf2\",\"dweb:/ipfs/QmRchoqWQPeKMVYSucv1mH6y2uAEQhNDg76pXTBAaXAq57\"]},\"project:/contracts/solmate/utils/Bytes32AddressLib.sol\":{\"keccak256\":\"0x51b6345eebb0befe08e78d6274aa5dab0929e43263f3c97287eab965ebe1ccc6\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://4c5c9a9d2d3c4e76d1461847f718bff615daa7f22114963cd61340285252587c\",\"dweb:/ipfs/QmTw822ve6B4qzxx3MTXxDaULaYG5ar7kNoVmbbGqrQFA7\"]},\"project:/contracts/solmate/utils/FixedPointMathLib.sol\":{\"keccak256\":\"0xdbc49c04fd5a386c835e72ac4a77507e59d7a7c58290655b4cff2c4152fd4f65\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://103d3a287a93dad2907bb42d7b3493f7f3176c561dacd2a0185ac6d900ed4577\",\"dweb:/ipfs/QmTzdyJy6CMKYwNPGNTNPsfHEuzsoGQyJRdoYFjuCwamCh\"]},\"project:/contracts/solmate/utils/SafeTransferLib.sol\":{\"keccak256\":\"0x9b41b183e558b16b7a838105aab67a2b05050af117de1970a23bec72d8c6679c\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://404f83420effce9bec5e43cc272cc254da06398b40f0299e9e0a4b69f1b8a331\",\"dweb:/ipfs/QmbFt1AdytvLaNFiAkVDBifDmaV2nJt1n22zLx1U9afnM5\"]},\"project:/contracts/yield-daddy/base/ERC4626Factory.sol\":{\"keccak256\":\"0x4af27dd19bf61795550510960f870edd666ee28658f6955420ac43088de257c4\",\"license\":\"AGPL-3.0\",\"urls\":[\"bzz-raw://0b3fdefc5fa2dfe4d37d5c3647a1bd2b4e203370f1f68e0d1c1f289f77a42201\",\"dweb:/ipfs/QmX8UWuY35uZUfMbz4NsKBw54XfZyQYH6TtVHud6YUHHMh\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.19;\n\nimport {ERC20} from \"../../solmate/tokens/ERC20.sol\";\nimport {ERC4626} from \"../../solmate/mixins/ERC4626.sol\";\nimport {Bytes32AddressLib} from \"../../solmate/utils/Bytes32AddressLib.sol\";\n\n/// @title ERC4626Factory\n/// @author zefram.eth\n/// @notice Abstract base contract for deploying ERC4626 wrappers\n/// @dev Uses CREATE2 deterministic deployment, so there can only be a single\n/// vault for each asset.\nabstract contract ERC4626Factory {\n    /// -----------------------------------------------------------------------\n    /// Library usage\n    /// -----------------------------------------------------------------------\n\n    using Bytes32AddressLib for bytes32;\n\n    /// -----------------------------------------------------------------------\n    /// Events\n    /// -----------------------------------------------------------------------\n\n    /// @notice Emitted when a new ERC4626 vault has been created\n    /// @param asset The base asset used by the vault\n    /// @param vault The vault that was created\n    event CreateERC4626(ERC20 indexed asset, ERC4626 vault);\n\n    /// -----------------------------------------------------------------------\n    /// External functions\n    /// -----------------------------------------------------------------------\n\n    /// @notice Creates an ERC4626 vault for an asset\n    /// @dev Uses CREATE2 deterministic deployment, so there can only be a single\n    /// vault for each asset. Will revert if a vault has already been deployed for the asset.\n    /// @param asset The base asset used by the vault\n    /// @return vault The vault that was created\n    function createERC4626(ERC20 asset) external virtual returns (ERC4626 vault);\n\n    /// @notice Computes the address of the ERC4626 vault corresponding to an asset. Returns\n    /// a valid result regardless of whether the vault has already been deployed.\n    /// @param asset The base asset used by the vault\n    /// @return vault The vault corresponding to the asset\n    function computeERC4626Address(ERC20 asset) external view virtual returns (ERC4626 vault);\n\n    /// -----------------------------------------------------------------------\n    /// Internal functions\n    /// -----------------------------------------------------------------------\n\n    /// @notice Computes the address of a contract deployed by this factory using CREATE2, given\n    /// the bytecode hash of the contract. Can also be used to predict addresses of contracts yet to\n    /// be deployed.\n    /// @dev Always uses bytes32(0) as the salt\n    /// @param bytecodeHash The keccak256 hash of the creation code of the contract being deployed concatenated\n    /// with the ABI-encoded constructor arguments.\n    /// @return The address of the deployed contract\n    function _computeCreate2Address(bytes32 bytecodeHash) internal view virtual returns (address) {\n        return keccak256(abi.encodePacked(bytes1(0xFF), address(this), bytes32(0), bytecodeHash))\n            // Prefix:\n            // Creator:\n            // Salt:\n            // Bytecode hash:\n            .fromLast20Bytes(); // Convert the CREATE2 hash into an address.\n    }\n}",
  "sourcePath": "/Users/blabla/Documents/gelato_test/contracts/yield-daddy/base/ERC4626Factory.sol",
  "ast": {
    "absolutePath": "project:/contracts/yield-daddy/base/ERC4626Factory.sol",
    "exportedSymbols": {
      "Bytes32AddressLib": [
        3152
      ],
      "ERC20": [
        3113
      ],
      "ERC4626": [
        2725
      ],
      "ERC4626Factory": [
        5072
      ]
    },
    "id": 5073,
    "license": "AGPL-3.0",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 5002,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".19"
        ],
        "nodeType": "PragmaDirective",
        "src": "37:24:25"
      },
      {
        "absolutePath": "project:/contracts/solmate/tokens/ERC20.sol",
        "file": "../../solmate/tokens/ERC20.sol",
        "id": 5004,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 5073,
        "sourceUnit": 3114,
        "src": "63:53:25",
        "symbolAliases": [
          {
            "foreign": {
              "id": 5003,
              "name": "ERC20",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 3113,
              "src": "71:5:25",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/solmate/mixins/ERC4626.sol",
        "file": "../../solmate/mixins/ERC4626.sol",
        "id": 5006,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 5073,
        "sourceUnit": 2726,
        "src": "117:57:25",
        "symbolAliases": [
          {
            "foreign": {
              "id": 5005,
              "name": "ERC4626",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 2725,
              "src": "125:7:25",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/solmate/utils/Bytes32AddressLib.sol",
        "file": "../../solmate/utils/Bytes32AddressLib.sol",
        "id": 5008,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 5073,
        "sourceUnit": 3153,
        "src": "175:76:25",
        "symbolAliases": [
          {
            "foreign": {
              "id": 5007,
              "name": "Bytes32AddressLib",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 3152,
              "src": "183:17:25",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "abstract": true,
        "baseContracts": [],
        "canonicalName": "ERC4626Factory",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 5009,
          "nodeType": "StructuredDocumentation",
          "src": "253:219:25",
          "text": "@title ERC4626Factory\n @author zefram.eth\n @notice Abstract base contract for deploying ERC4626 wrappers\n @dev Uses CREATE2 deterministic deployment, so there can only be a single\n vault for each asset."
        },
        "fullyImplemented": false,
        "id": 5072,
        "linearizedBaseContracts": [
          5072
        ],
        "name": "ERC4626Factory",
        "nameLocation": "490:14:25",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "global": false,
            "id": 5012,
            "libraryName": {
              "id": 5010,
              "name": "Bytes32AddressLib",
              "nameLocations": [
                "700:17:25"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 3152,
              "src": "700:17:25"
            },
            "nodeType": "UsingForDirective",
            "src": "694:36:25",
            "typeName": {
              "id": 5011,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "722:7:25",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            }
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 5013,
              "nodeType": "StructuredDocumentation",
              "src": "912:163:25",
              "text": "@notice Emitted when a new ERC4626 vault has been created\n @param asset The base asset used by the vault\n @param vault The vault that was created"
            },
            "eventSelector": "cbd4e5d1362721c7fd10daaabb1a046344447d4798be55684b8a6b4fc1765d72",
            "id": 5021,
            "name": "CreateERC4626",
            "nameLocation": "1086:13:25",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 5020,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5016,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "asset",
                  "nameLocation": "1114:5:25",
                  "nodeType": "VariableDeclaration",
                  "scope": 5021,
                  "src": "1100:19:25",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ERC20_$3113",
                    "typeString": "contract ERC20"
                  },
                  "typeName": {
                    "id": 5015,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 5014,
                      "name": "ERC20",
                      "nameLocations": [
                        "1100:5:25"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 3113,
                      "src": "1100:5:25"
                    },
                    "referencedDeclaration": 3113,
                    "src": "1100:5:25",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ERC20_$3113",
                      "typeString": "contract ERC20"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 5019,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "vault",
                  "nameLocation": "1129:5:25",
                  "nodeType": "VariableDeclaration",
                  "scope": 5021,
                  "src": "1121:13:25",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ERC4626_$2725",
                    "typeString": "contract ERC4626"
                  },
                  "typeName": {
                    "id": 5018,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 5017,
                      "name": "ERC4626",
                      "nameLocations": [
                        "1121:7:25"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 2725,
                      "src": "1121:7:25"
                    },
                    "referencedDeclaration": 2725,
                    "src": "1121:7:25",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ERC4626_$2725",
                      "typeString": "contract ERC4626"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1099:36:25"
            },
            "src": "1080:56:25"
          },
          {
            "documentation": {
              "id": 5022,
              "nodeType": "StructuredDocumentation",
              "src": "1330:328:25",
              "text": "@notice Creates an ERC4626 vault for an asset\n @dev Uses CREATE2 deterministic deployment, so there can only be a single\n vault for each asset. Will revert if a vault has already been deployed for the asset.\n @param asset The base asset used by the vault\n @return vault The vault that was created"
            },
            "functionSelector": "abeccaa4",
            "id": 5031,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "createERC4626",
            "nameLocation": "1672:13:25",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5026,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5025,
                  "mutability": "mutable",
                  "name": "asset",
                  "nameLocation": "1692:5:25",
                  "nodeType": "VariableDeclaration",
                  "scope": 5031,
                  "src": "1686:11:25",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ERC20_$3113",
                    "typeString": "contract ERC20"
                  },
                  "typeName": {
                    "id": 5024,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 5023,
                      "name": "ERC20",
                      "nameLocations": [
                        "1686:5:25"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 3113,
                      "src": "1686:5:25"
                    },
                    "referencedDeclaration": 3113,
                    "src": "1686:5:25",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ERC20_$3113",
                      "typeString": "contract ERC20"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1685:13:25"
            },
            "returnParameters": {
              "id": 5030,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5029,
                  "mutability": "mutable",
                  "name": "vault",
                  "nameLocation": "1733:5:25",
                  "nodeType": "VariableDeclaration",
                  "scope": 5031,
                  "src": "1725:13:25",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ERC4626_$2725",
                    "typeString": "contract ERC4626"
                  },
                  "typeName": {
                    "id": 5028,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 5027,
                      "name": "ERC4626",
                      "nameLocations": [
                        "1725:7:25"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 2725,
                      "src": "1725:7:25"
                    },
                    "referencedDeclaration": 2725,
                    "src": "1725:7:25",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ERC4626_$2725",
                      "typeString": "contract ERC4626"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1724:15:25"
            },
            "scope": 5072,
            "src": "1663:77:25",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 5032,
              "nodeType": "StructuredDocumentation",
              "src": "1746:283:25",
              "text": "@notice Computes the address of the ERC4626 vault corresponding to an asset. Returns\n a valid result regardless of whether the vault has already been deployed.\n @param asset The base asset used by the vault\n @return vault The vault corresponding to the asset"
            },
            "functionSelector": "80cfde3c",
            "id": 5041,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "computeERC4626Address",
            "nameLocation": "2043:21:25",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5036,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5035,
                  "mutability": "mutable",
                  "name": "asset",
                  "nameLocation": "2071:5:25",
                  "nodeType": "VariableDeclaration",
                  "scope": 5041,
                  "src": "2065:11:25",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ERC20_$3113",
                    "typeString": "contract ERC20"
                  },
                  "typeName": {
                    "id": 5034,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 5033,
                      "name": "ERC20",
                      "nameLocations": [
                        "2065:5:25"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 3113,
                      "src": "2065:5:25"
                    },
                    "referencedDeclaration": 3113,
                    "src": "2065:5:25",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ERC20_$3113",
                      "typeString": "contract ERC20"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2064:13:25"
            },
            "returnParameters": {
              "id": 5040,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5039,
                  "mutability": "mutable",
                  "name": "vault",
                  "nameLocation": "2117:5:25",
                  "nodeType": "VariableDeclaration",
                  "scope": 5041,
                  "src": "2109:13:25",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ERC4626_$2725",
                    "typeString": "contract ERC4626"
                  },
                  "typeName": {
                    "id": 5038,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 5037,
                      "name": "ERC4626",
                      "nameLocations": [
                        "2109:7:25"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 2725,
                      "src": "2109:7:25"
                    },
                    "referencedDeclaration": 2725,
                    "src": "2109:7:25",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ERC4626_$2725",
                      "typeString": "contract ERC4626"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2108:15:25"
            },
            "scope": 5072,
            "src": "2034:90:25",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "external"
          },
          {
            "body": {
              "id": 5070,
              "nodeType": "Block",
              "src": "2896:280:25",
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "hexValue": "30784646",
                                    "id": 5054,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "2947:4:25",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_255_by_1",
                                      "typeString": "int_const 255"
                                    },
                                    "value": "0xFF"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_255_by_1",
                                      "typeString": "int_const 255"
                                    }
                                  ],
                                  "id": 5053,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "2940:6:25",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_bytes1_$",
                                    "typeString": "type(bytes1)"
                                  },
                                  "typeName": {
                                    "id": 5052,
                                    "name": "bytes1",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "2940:6:25",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 5055,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "2940:12:25",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes1",
                                  "typeString": "bytes1"
                                }
                              },
                              {
                                "arguments": [
                                  {
                                    "id": 5058,
                                    "name": "this",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 4294967268,
                                    "src": "2962:4:25",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_ERC4626Factory_$5072",
                                      "typeString": "contract ERC4626Factory"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_contract$_ERC4626Factory_$5072",
                                      "typeString": "contract ERC4626Factory"
                                    }
                                  ],
                                  "id": 5057,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "2954:7:25",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": {
                                    "id": 5056,
                                    "name": "address",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "2954:7:25",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 5059,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "2954:13:25",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "arguments": [
                                  {
                                    "hexValue": "30",
                                    "id": 5062,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "2977:1:25",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    },
                                    "value": "0"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_0_by_1",
                                      "typeString": "int_const 0"
                                    }
                                  ],
                                  "id": 5061,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "2969:7:25",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_bytes32_$",
                                    "typeString": "type(bytes32)"
                                  },
                                  "typeName": {
                                    "id": 5060,
                                    "name": "bytes32",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "2969:7:25",
                                    "typeDescriptions": {}
                                  }
                                },
                                "id": 5063,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "nameLocations": [],
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "2969:10:25",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              {
                                "id": 5064,
                                "name": "bytecodeHash",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 5044,
                                "src": "2981:12:25",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes1",
                                  "typeString": "bytes1"
                                },
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                },
                                {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              ],
                              "expression": {
                                "id": 5050,
                                "name": "abi",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 4294967295,
                                "src": "2923:3:25",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_abi",
                                  "typeString": "abi"
                                }
                              },
                              "id": 5051,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberLocation": "2927:12:25",
                              "memberName": "encodePacked",
                              "nodeType": "MemberAccess",
                              "src": "2923:16:25",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                "typeString": "function () pure returns (bytes memory)"
                              }
                            },
                            "id": 5065,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "nameLocations": [],
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2923:71:25",
                            "tryCall": false,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          ],
                          "id": 5049,
                          "name": "keccak256",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 4294967288,
                          "src": "2913:9:25",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                            "typeString": "function (bytes memory) pure returns (bytes32)"
                          }
                        },
                        "id": 5066,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2913:82:25",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "id": 5067,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "3107:15:25",
                      "memberName": "fromLast20Bytes",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3135,
                      "src": "2913:209:25",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_pure$_t_bytes32_$returns$_t_address_$attached_to$_t_bytes32_$",
                        "typeString": "function (bytes32) pure returns (address)"
                      }
                    },
                    "id": 5068,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2913:211:25",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 5048,
                  "id": 5069,
                  "nodeType": "Return",
                  "src": "2906:218:25"
                }
              ]
            },
            "documentation": {
              "id": 5042,
              "nodeType": "StructuredDocumentation",
              "src": "2318:479:25",
              "text": "@notice Computes the address of a contract deployed by this factory using CREATE2, given\n the bytecode hash of the contract. Can also be used to predict addresses of contracts yet to\n be deployed.\n @dev Always uses bytes32(0) as the salt\n @param bytecodeHash The keccak256 hash of the creation code of the contract being deployed concatenated\n with the ABI-encoded constructor arguments.\n @return The address of the deployed contract"
            },
            "id": 5071,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_computeCreate2Address",
            "nameLocation": "2811:22:25",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 5045,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5044,
                  "mutability": "mutable",
                  "name": "bytecodeHash",
                  "nameLocation": "2842:12:25",
                  "nodeType": "VariableDeclaration",
                  "scope": 5071,
                  "src": "2834:20:25",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 5043,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2834:7:25",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2833:22:25"
            },
            "returnParameters": {
              "id": 5048,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 5047,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 5071,
                  "src": "2887:7:25",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 5046,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2887:7:25",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2886:9:25"
            },
            "scope": 5072,
            "src": "2802:374:25",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "scope": 5073,
        "src": "472:2706:25",
        "usedErrors": []
      }
    ],
    "src": "37:3141:25"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.19+commit.7dd6d404.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.11",
  "updatedAt": "2023-03-02T01:35:07.887Z",
  "devdoc": {
    "author": "zefram.eth",
    "details": "Uses CREATE2 deterministic deployment, so there can only be a single vault for each asset.",
    "events": {
      "CreateERC4626(address,address)": {
        "params": {
          "asset": "The base asset used by the vault",
          "vault": "The vault that was created"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "computeERC4626Address(address)": {
        "params": {
          "asset": "The base asset used by the vault"
        },
        "returns": {
          "vault": "The vault corresponding to the asset"
        }
      },
      "createERC4626(address)": {
        "details": "Uses CREATE2 deterministic deployment, so there can only be a single vault for each asset. Will revert if a vault has already been deployed for the asset.",
        "params": {
          "asset": "The base asset used by the vault"
        },
        "returns": {
          "vault": "The vault that was created"
        }
      }
    },
    "title": "ERC4626Factory",
    "version": 1
  },
  "userdoc": {
    "events": {
      "CreateERC4626(address,address)": {
        "notice": "Emitted when a new ERC4626 vault has been created"
      }
    },
    "kind": "user",
    "methods": {
      "computeERC4626Address(address)": {
        "notice": "Computes the address of the ERC4626 vault corresponding to an asset. Returns a valid result regardless of whether the vault has already been deployed."
      },
      "createERC4626(address)": {
        "notice": "Creates an ERC4626 vault for an asset"
      }
    },
    "notice": "Abstract base contract for deploying ERC4626 wrappers",
    "version": 1
  }
}